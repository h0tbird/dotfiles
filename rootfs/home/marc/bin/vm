#!/bin/bash

#------------------------------------------------------------------------------
# Absolute paths.
#------------------------------------------------------------------------------

LS="`which ls` --format=single-column"
AWK=`which awk`
IP=`which ip`
SUDO=`which sudo`
SYSCTL=`which sysctl`
BRCTL=`which brctl`
SOCAT=`which socat`
CAT=`which cat`

#------------------------------------------------------------------------------
# next_tap: returns the name of the next available TAP interface.
#------------------------------------------------------------------------------

function next_tap {
  taps=`$LS -d /sys/devices/virtual/net/tap* 2> /dev/null`
  [ $? != 0 ] && echo 'tap0' && return
  echo "${taps}" | $AWK -F 'p' 'END {print "tap"$2+1}'
}

#------------------------------------------------------------------------------
# create_tap: creates a new TAP device named $1 and owned by $USER.
#------------------------------------------------------------------------------

function create_tap {
  $SUDO $IP tuntap add dev $1 mode tap user $USER
  $SUDO $IP link set dev $1 up
  echo $1
}

#------------------------------------------------------------------------------
# create_bridge: creates a new bridge named $1.
#------------------------------------------------------------------------------

function create_bridge {
  $BRCTL show | grep -q $1 && return
  $SUDO $BRCTL addbr $1
}

#------------------------------------------------------------------------------
# destroy_tap: destroys the TAP device named $1.
#------------------------------------------------------------------------------

function destroy_tap {
  $IP link | grep -q $1 || return 0
  $SUDO $IP link set dev $1 down
  $SUDO $IP tuntap del dev $1 mode tap
  return $?
}

#------------------------------------------------------------------------------
# bridge_lan: Bridges a TAP device named $1 to the br0 device.
#------------------------------------------------------------------------------

function bridge_lan {
  $SUDO $BRCTL addif br0 $1
}

#------------------------------------------------------------------------------
# bridge_wifi: Bridges a TAP device named $1 to the wlan0 device.
#------------------------------------------------------------------------------

function bridge_wifi {
  $SUDO $SYSCTL -w net.ipv4.ip_forward=1 &> /dev/null
  $SUDO $SYSCTL -w net.ipv4.conf.wlan0.proxy_arp=1 &> /dev/null
  $SUDO $SYSCTL -w net.ipv4.conf.${1}.proxy_arp=1 &> /dev/null
  echo $1
}

#------------------------------------------------------------------------------
# Entry point:
#------------------------------------------------------------------------------

[ -d /var/tmp/vm ] || mkdir /var/tmp/vm

#------------------------------------------------------------------------------
# In order to connect to the quemu monitor of each particular VM you can use:
# rlwrap -H ~/.qmp_history socat UNIX-CONNECT:/var/tmp/vm/xxx.monitor STDIO
#------------------------------------------------------------------------------

case "${1}-${2}" in

  #----------#
  # puppet01 #
  #----------#

  puppet01-start)

    TAP=$(bridge_wifi $(create_tap $(next_tap)))
    $SUDO $IP route add 192.168.1.4 dev ${TAP}
    echo ${TAP} > /var/tmp/vm/${1}.tap

    qemu-system-x86_64 \
    -enable-kvm \
    -m 1024 \
    -smp 2,sockets=2,cores=1,threads=1 \
    -pidfile /var/tmp/vm/${1}.pid \
    -name ${1}.demo.lan \
    -nographic \
    -nodefaults \
    -boot order=nc,reboot-timeout=60,strict=on \
    -rtc base=utc \
    -netdev tap,id=netdev0,ifname=${TAP},script=no,downscript=no \
    -device virtio-net-pci,romfile=/usr/share/qemu/pxe-virtio.rom,netdev=netdev0,id=net0,bootindex=1 \
    -drive file="${HOME}/vm-images/${1}.img",if=none,id=drive0 \
    -device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x5,drive=drive0,id=disk0,bootindex=2 \
    -chardev socket,id=monitor,path=/var/tmp/vm/${1}_monitor.sock,server,nowait \
    -mon chardev=monitor,id=monitor,mode=control \
    -chardev socket,id=console,path=/var/tmp/vm/${1}_console.sock,server,nowait \
    -device isa-serial,chardev=console,id=serial0 \
    -daemonize ;;

  #-------#
  # lxc01 #
  #-------#

  lxc01-start)

    create_bridge br0

    qemu-system-x86_64 \
    -enable-kvm \
    -m 1024 \
    -smp 2,sockets=2,cores=1,threads=1 \
    -pidfile /var/tmp/vm/${1}.pid \
    -name ${1}.demo.lan \
    -nographic \
    -nodefaults \
    -boot order=nc,reboot-timeout=60,strict=on \
    -rtc base=utc \
    -netdev bridge,id=netdev0 \
    -device virtio-net-pci,romfile=/usr/share/qemu/pxe-virtio.rom,netdev=netdev0,id=net0,bootindex=1 \
    -drive file="${HOME}/vm-images/${1}.img",if=none,id=drive0 \
    -device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x5,drive=drive0,id=disk0,bootindex=2 \
    -chardev socket,id=monitor,path=/var/tmp/vm/${1}_monitor.sock,server,nowait \
    -mon chardev=monitor,id=monitor,mode=control \
    -chardev socket,id=console,path=/var/tmp/vm/${1}_console.sock,server,nowait \
    -device isa-serial,chardev=console,id=serial0 \
    -daemonize

    socat unix-connect:/var/tmp/vm/lxc01_console.sock stdio ;;

  #----------#
  # Stop any #
  #----------#

  *-stop)

    echo '{ "execute": "qmp_capabilities" } { "execute": "quit" }' | \
    $SOCAT - UNIX-CONNECT:/var/tmp/vm/${1}_monitor.sock > /dev/null
    until destroy_tap `$CAT /var/tmp/vm/${1}.tap`; do sleep 2; done ;;

  #---------#
  # Default #
  #---------#

  *) echo "Usage: `basename $0` <name> <start|stop>" ;;

esac
