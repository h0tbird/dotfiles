#!/bin/bash

#------------------------------------------------------------------------------
# Static network setup:
#------------------------------------------------------------------------------

LAN_IP='192.168.2.11'
LAN_NET='192.168.2.0'
LAN_BCAST='192.168.2.255'
LAN_GW='192.168.2.1'
LAN_MASK='24'

#LAN_IP='192.168.88.22'
#LAN_NET='192.168.88.0'
#LAN_BCAST='192.168.88.255'
#LAN_GW='192.168.88.1'
#LAN_MASK='24'

WIFI_IP='192.168.1.77'
WIFI_NET='192.168.1.0'
WIFI_BCAST='192.168.1.255'
WIFI_GW='192.168.1.1'
WIFI_MASK='24'

USB_IP='192.168.42.209'
USB_NET='192.168.42.0'
USB_BCAST='192.168.42.255'
USB_GW='192.168.42.129'
USB_MASK='24'

#------------------------------------------------------------------------------
# Metrics:
#------------------------------------------------------------------------------

LAN_METRIC='700'
WIFI_METRIC='300'
USB_METRIC='500'

#------------------------------------------------------------------------------
# Start LAN:
#------------------------------------------------------------------------------

function lan_start {

    # Create bridge:
    /usr/sbin/brctl addbr br0
    /usr/sbin/brctl addif br0 eth0

    # Bring up links:
    /usr/sbin/ip link set dev eth0 up
    /usr/sbin/ip link set dev br0 up

    # Set IP address:
    case $1 in

      'static')
        /usr/sbin/ip addr add ${LAN_IP}/${LAN_MASK} dev br0 broadcast ${LAN_BCAST}
        /usr/sbin/ip route del ${LAN_NET}/${LAN_MASK} dev br0 proto kernel scope link src ${LAN_IP}
        /usr/sbin/ip route add ${LAN_NET}/${LAN_MASK} dev br0 proto kernel scope link src ${LAN_IP} metric ${LAN_METRIC}
        /usr/sbin/ip route add ${LAN_IP} via 127.0.0.1 dev lo metric ${LAN_METRIC}
        /usr/sbin/ip route add default via ${LAN_GW} dev br0 metric ${LAN_METRIC} ;;

      'dhcp')
        /usr/sbin/dhcpcd -t 60 -4 -m ${LAN_METRIC} br0 ;;

    esac

    # Setup DNS:
    /usr/bin/echo "nameserver 8.8.8.8" | /usr/sbin/resolvconf -a br0
}

#------------------------------------------------------------------------------
# Stop LAN:
#------------------------------------------------------------------------------

function lan_stop {

    # Setup DNS:
    /usr/sbin/resolvconf -d br0

    case $1 in

      'static')
        /usr/sbin/ip route del default dev br0
        /usr/sbin/ip route del ${LAN_IP} dev lo ;;

      'dhcp')
        /usr/sbin/dhcpcd -x br0 ;;

    esac

    # Flush IP addresses:
    /usr/sbin/ip addr flush dev eth0
    /usr/sbin/ip addr flush dev br0

    # Take down links:
    /usr/sbin/ip link set dev eth0 down
    /usr/sbin/ip link set dev br0 down

    # Delete interfaces:
    /usr/sbin/brctl delbr br0
}

#------------------------------------------------------------------------------
# Start WiFi:
#------------------------------------------------------------------------------

function wifi_start {

    # Bring up links:
    /usr/sbin/ip link set wlan0 up

    # Launch the supplicant:
    /usr/sbin/wpa_supplicant -B â€“Dnl80211 -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf

    case $1 in

      'static')
        /usr/sbin/ip addr add ${WIFI_IP}/${WIFI_MASK} dev wlan0 broadcast ${WIFI_BCAST}
        /usr/sbin/ip route del ${WIFI_NET}/${WIFI_MASK} dev wlan0 proto kernel scope link src ${WIFI_IP}
        /usr/sbin/ip route add ${WIFI_NET}/${WIFI_MASK} dev wlan0 proto kernel scope link src ${WIFI_IP} metric ${WIFI_METRIC}
        /usr/sbin/ip route add ${WIFI_IP} via 127.0.0.1 dev lo metric ${WIFI_METRIC}
        /usr/sbin/ip route add default via ${WIFI_GW} dev wlan0 metric ${WIFI_METRIC} ;;

      'dhcp')
        /usr/sbin/dhcpcd -4 -m ${WIFI_METRIC} wlan0 ;;

    esac

    # Setup DNS:
    /usr/bin/echo "nameserver 8.8.8.8" | /usr/sbin/resolvconf -a wlan0
}

#------------------------------------------------------------------------------
# Stop WiFi:
#------------------------------------------------------------------------------

function wifi_stop {

    case $1 in

      'static')
        /usr/sbin/ip route del default dev wlan0
        /usr/sbin/ip route del ${WIFI_IP} dev lo ;;

      'dhcp')
        /usr/sbin/dhcpcd -x wlan0 ;;

    esac

    # Flush IP addresses:
    /usr/sbin/ip addr flush dev wlan0

    # Therminate the supplicant:
    /usr/bin/wpa_cli terminate

    # Take down links:
    /usr/sbin/ip link set dev wlan0 down
}

#------------------------------------------------------------------------------
# Start USB:
#------------------------------------------------------------------------------

function usb_start {

    # Bring up links:
    /usr/sbin/ip link set usb0 up

    case $1 in

      'static')
        /usr/sbin/ip addr add ${USB_IP}/${USB_MASK} dev usb0 broadcast ${USB_BCAST}
        /usr/sbin/ip route del ${USB_NET}/${USB_MASK} dev usb0 proto kernel scope link src ${USB_IP}
        /usr/sbin/ip route add ${USB_NET}/${USB_MASK} dev usb0 proto kernel scope link src ${USB_IP} metric ${USB_METRIC}
        /usr/sbin/ip route add ${USB_IP} via 127.0.0.1 dev lo metric ${USB_METRIC}
        /usr/sbin/ip route add default via ${USB_GW} dev usb0 metric ${USB_METRIC} ;;

      'dhcp')
        /usr/sbin/dhcpcd -4 -m ${USB_METRIC} usb0 ;;

    esac

    # Setup DNS:
    /usr/bin/echo "nameserver 8.8.8.8" | /usr/sbin/resolvconf -a usb0
}

#------------------------------------------------------------------------------
# Stop USB:
#------------------------------------------------------------------------------

function usb_stop {

    case $1 in

      'static')
        /usr/sbin/ip route del default dev usb0
        /usr/sbin/ip route del ${USB_IP} dev lo ;;

      'dhcp')
        /usr/sbin/dhcpcd -x usb0 ;;

    esac

    # Flush IP addresses:
    /usr/sbin/ip addr flush dev usb0

    # Take down links:
    /usr/sbin/ip link set dev usb0 down
}

#------------------------------------------------------------------------------
# Entry point (run via sudo if not 'root'):
#------------------------------------------------------------------------------

SUDO=`which sudo`
if [[ $EUID -ne 0 ]]; then $SUDO $0 $@

else

    OIFS=$IFS; IFS='_'; a=($1); IFS=$OIFS
    case ${a[1]} in static|dhcp) ${a[0]}_${2} ${a[1]} ;;
    esac
fi

